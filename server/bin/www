#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var https = require('https');
var certOpts = require('../conf').certOpts;



/**
 * Get port from environment and store in Express.
 */

var httpsport = normalizePort(process.env.PORT || '8443');
var httpport = normalizePort(process.env.PORT || '8080');


/**
 * Create HTTP server.
 */
var httpServer = http.createServer(app);
httpServer.listen(httpport);
httpServer.on('error',onError);
httpServer.on('listening',httpOnListening);

/**
 * Listen on provided port, on all interfaces.
 */
var httpsServer = https.createServer(certOpts, app);
httpsServer.listen(httpsport);
httpsServer.on('error', onError);
httpsServer.on('listening', httpsOnListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function httponError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof httpport === 'string'
    ? 'Pipe ' + httpport
    : 'Port ' + httpport;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function httpsonError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof httpsport === 'string'
    ? 'Pipe ' + httpsport
    : 'Port ' + httpsport;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function httpsOnListening() {
  var addr = httpsServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function httpOnListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

